Section 16 - Todoey App - Flutter State Management
Needs Todoey Mockup.pdf for Design and Colors

1. L-183: Designing the To-Do List App
1.1 create new project and delete eveything but void main in main.dart
1.2 add stless widget MyApp, replace Container with MaterialApp (home: TaskScreen()
1.3 create new folder screens in lib and add task_screen.dart
1.4 in task_screen - import material.dart
1.5 create new stless TasksScreen
1.6 import task_screen in main.dart
1.7 in task_screen - replace Container() with Scaffold(bgcolor lightblue, body: Column())
1.8 Column wrapped in Container (for Padding) needs icon.list, Text(Todoey)
1.9 wrap Icon in CircleAvatar
1.10 add SizedBox as "padding"
1.11 add TextStyle to Text
1.12 CrossAxisAlignment of column left (start)
1.13 add Text() for # tasks
1.14 add Container() - use BoxDecoration to manipulate props of box
1.15 wrap container in Expanded()
1.16 to free the Container() of padding: nest Column() (with padding) on new Column() without padding and put Container in there
    1.16(a) cut Expanded out
    1.16(b) wrap topmost container in new Column()
    1.16(c) paste Expanded below Container()
    1.16(d) align to left in new Column() with CrossAxisAlignment.start
1.17 add FloatingActionButton to Scaffold

2. L-184: The ListView Challenge:
2.1 add ListView as child to bottom Container
2.2 add ListTiles as children
2.3 add symmetric 20px padding to container to line up
2.4 extract widget ListView as TasksList
2.5 extract widget ListTitle as TaskTile from TasksList (delete the other)
2.6 delete all constructors, delete any ListTile remaining in TasksList, add 2 more TaskTiles
2.7 create folder widgets (components), add tasks_list.dart & task_tile.dart and move TaskList & TaskTile there and add import material, add import statements to tasks_list & task_screen
2.8 add onPressed() to FloatingActionButton to add task

3. L-185: The BottomSheet Widget
3.1 create builder function buildBottomSheet() for ModalBottomSheet in TaskScreen (at the moment only re-run a  Container( with centered demo Text) as arrow func
3.2 add showModalBottomSheet() to onPressed of FAB
3.3 replace builder with anon func and delete buildBottomSheet
3.4 in screens folder add add_tasks_screen.dart
3.5 create stless AddTaskScreen()
3.6 change bgColor of AddTaskScreen Container to match background grey and add second container with rounded corners
3.7 replace Container() in onPressed of FAB with AddTaskScreen()
3.8 add children to bottomSheet:
    3.8(a) Text() with 'Add Task', textAlign: center
    3.8(b) TextField that automatically has focus and shows keyboard (autofocus: true)
    3.8(c) FlatButton 'Add' (needs onPressed to show color!! otherwise disabled!)
3.9 add CrossAxisAlignment.stretch to Column()
3.10 add Padding() to Container() = around Column()

4. L-186: What is State and How do we Manage it?
4.1 in task_tile.dart - change color of Checkbox to lightBlueAccent
4.2 extract checkbox as separate widget TaskCheckBox(), delete constr, convert to stateful widget (left click & alt + Enter)
4.3 add onChanged prop with value change logic (also add bool isChecked on top) inside setState() !!!
4.4 move isChecked from STATE class to TaskTile class & convert TaskTile to Stateful Widget
4.5 change TaskCheckbox to STATELESS widget (no longer needed to keep state, will be build anew every time) (delete constr)
4.6 add final bool checkboxState to TaskCheckbox(), add constr, replace isChecked with checkboxState in TaskCheckbox(), delete setState()
4.7 add isChecked to TaskCheckbox call
4.8 add TextStyle to Text widget: if isChecked is true, strikethrough, else null (no decoration)
4.9 create callback with new func checkboxCallback (with bool checkboxState param)
4.10 use checkboxCallback() in onChanged of TaskCheckbox class
    4.10(a) add final Function toggleCheckboxState to handle func handover and add to constr
    4.10(b) create onChanged on Widget build Checkbox calling and use toggleCheckboxState
    4.10(c) add checkboxCallback call to trailing: TaskCheckbox in TaskTileState
    4.10(d) replace checkboxCallback as anon func in toggleCheckboxState:

5. L-188: The ListViewBuilder
Task: add logic to add new task to ListView when ADD button ist pressed on add_task_screen:
- make TasksList dynamic:
5.1 in task_list.dart -> convert TasksList to stateFUL widget
5.2 add var list of Tasks tasks
5.3 create models folder in lib and create task.dart inside model folder
5.4 create Task class in task.dart (default value for isDone = false)
5.5 in Task create func toggleDone that sets value of isDone to opposite
5.6 in tasks_list - for now: add 3 manual Tasks to List<Task>
-- make task_tile simpler (both ListTile and Checkbox become Stateless -> merge):
5.7 delete call to state and make TaskTile stateless
5.8 add final to bool isChecked and remove setState()from toggleCheckboxState
5.9 bring Checkbox Widget back up into Tasktile trailin
5.10 replace checkboxState in value: with isChecked
5.11 add tasktitle final String and replace as text in Text() and remove default value for isChecked
5.12 add constr for TaskTile
5.13 -- in TaskList: replace ListView with ListView.builder to make it dynamic <- !!
5.14 -- in task_tile: add callback from TaskTile to List<Task> to provide info
    5.14(a) -- in tasks_list: add property checkboxCallback with anon func that  toggles State for checkBox
    5.14(b) -- in task_tile: add checkboxCallback Function prop to TaskTile definition & in constr
    5.14(c) add onChanged logic: use checkboxCallback

6. L-189: Lifting State Up Challenge - Add Button Functionality
Task: add task to TaskList when add button is pressed -> bring state up to TasksScreen
6.1 lift state of List<Task> up to TasksScreen = move it there
6.2 switch TasksScreen to stateFUL widget
6.3 enable TasksList to receive tasks
    6.3(a) in task_list: create final List<Task> tasks in TaskList class, not _TasksListState!
    6.3(b) add constr (TaskList() not _TaskListState() !)
    6.3(c) use widget.tasks to access them in TaskTile
    6.3(d) in tasks_screen: add tasks to TaskTile()
6.4 in add_tasks_screen handle new text in TextField
    6.4(a) add var newTaskTitle to build dunc of state !!!
    6.4(b) in TextTile add onChanged with callback to newTaskTitle
6.5 pass over newTaskTitle from add_task_screen to TaskList when "Add" Button is pressed
    6.5(a) in add_task_screen add final Func addTaskCallback + constr
    6.5(b) use addTaskCallback in onPressed of FlatButton
    6.5(c) in tasks_screen add newTaskTitle to AddTaskScreen() and add to TasksList inside setState()
6.6 Dismiss BottomSheet() with Navigator.pop()
6.7 change hardcoded '12 tasks' into dynamic calc of number of tasks

7. L-190:

